// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id          Int          @id @default(autoincrement())
  clerkId     String?      @unique
  email       String       @unique
  firstName   String
  lastName    String?
  imageUrl    String?
  collegeName String
  students    Students[]
  counsellors Counsellor[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Students {
  id               Int          @id @default(autoincrement())
  clerkId          String?      @unique
  email            String       @unique
  firstName        String
  lastName         String?
  imageUrl         String?
  languages        String[]
  testResults      TestResult[] 
  ticketsAsStudent Ticket[]     @relation("StudentTickets")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  adminId          Int?
  admin            Admin?        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  collegeName      String       @default("Not Specified")
}

model Counsellor {
  id            Int             @id @default(autoincrement())
  clerkId       String?         @unique
  email         String          @unique
  firstName     String
  lastName      String?
  imageUrl      String?
  bio           String?
  relatedSkills String[]
  speciality    CounsellorType[]
  averageRating Float?
  allRatings    Int[]
  languages     String[]
  assignedUser  Ticket[]        @relation("CounsellorTickets")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  admin         Admin?          @relation(fields: [adminId], references: [id], onDelete: SetNull)
  adminId       Int?
  collegeName   String          @default("Not Specified")
}

model TestResult {
  id         Int      @id @default(autoincrement())
  user       Students @relation(fields: [userId], references: [id])
  userId     Int
  responses  Json?
  phq9Score  Int?
  gad7Score  Int?
  ghq12Score Int?

  interpretation MentalState @default(HEALTHY)

  createdAt DateTime @default(now())
}

model Ticket {
  id              Int            @id @default(autoincrement())
  description     String
  status          TicketStatus   @default(OPEN)
  level           Level          @default(SPECIALASKING)
  meetingLocation String?
  timing          DateTime
  phoneNumber     String?
  concern         Concern[]
  severity        Severity
  student         Students       @relation("StudentTickets", fields: [studentId], references: [id])
  studentId       Int

  counsellor   Counsellor? @relation("CounsellorTickets", fields: [counsellorId], references: [id])
  counsellorId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Severity {
  Normal
  MEDIUM
  Emergency
}

enum Level {
  GENERAL
  SPECIALASKING
  EMERGENCY
}

enum Concern {
  MOOD_EMOTIONS // sadness, hopelessness, loss of interest
  ANXIETY_STRESS // nervousness, restlessness, worry
  SLEEP_ENERGY // insomnia, fatigue, oversleeping
  ACADEMICS_PERFORMANCE // academic stress, focus issues, workload
  SOCIAL_RELATIONSHIPS // loneliness, conflicts, isolation
  SELF_PERCEPTION // low self-esteem, self-criticism, body image
  RISK_BEHAVIORS // self-harm thoughts, substance use, impulsive actions
  PHYSICAL_HEALTH // body pains, appetite changes, panic-like symptoms
}

enum CounsellorType {
  GENERAL_COUNSELOR // for mild issues, general guidance, stress management
  ACADEMIC_COUNSELOR // for study stress, academic performance, career pressure
  CLINICAL_PSYCHOLOGIST // for moderate to serious mental health conditions, therapy
  PSYCHIATRIST // for severe conditions, medical evaluation, medication
  PEER_SUPPORT_VOLUNTEER // trained student volunteer for peer-to-peer support
}

enum TicketStatus {
  OPEN
  SELECTED
  RESOLVED
  CLOSED
}

enum MentalState {
  HEALTHY // no significant issues
  SLIGHTLY_RISKY // mild symptoms
  MODERATE // moderate mental health issues
  BAD_SHAPE // severe condition
  SERIOUS // urgent, crisis-level
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}
